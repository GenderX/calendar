name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  # 为了安全，通常不在 pull_request 时触发部署
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

jobs:
  # --- 第一个任务：构建 ---
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Copy Jar to Server # 定义一个步骤名称
        uses: appleboy/scp-action@master # 使用 appleboy/scp-action 这个开源 action，将 jar 包拷贝到远程服务器
        with:
          host: ${{ secrets.SSH_HOST }} # 远程服务器地址，从 secrets 中读取
          username: ${{ secrets.SSH_USER }} # 远程服务器用户名，从 secrets 中读取
          port: ${{ secrets.PORT }} # 远程服务器端口号，从 secrets 中读取
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 密钥，从 secrets 中读取
          source: "build/libs/*.jar" # 要拷贝的文件路径
          rm: true # 是否删除目标文件，如果为 true，表示先删除目标文件，再拷贝新文件
          target: ${{ secrets.SERVER_DESTINATION }} # 目标文件路径 注意，最终目录为/www/test/target/test_deploy_jar.jar

  # --- 第二个任务：部署 ---
  deploy:
    # 'needs: build' 确保 deploy 任务在 build 任务成功后才开始
    needs: build
    # 'if: github.ref == 'refs/heads/main'' 确保只有在推送到 main 分支时才执行部署
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # 第二步：部署到服务器
      - name: Deploy to Server
        # 使用一个非常流行的 SSH Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          # script 部分定义了文件复制成功后，在服务器上执行的命令
          script: |
            cd ${{ secrets.SERVER_DESTINATION }}
            ./restart-app.sh
